class(my_data)
cnames <- c("patient", "age", "weight","bp", "rating", "test")
colnames(cnames, my_datq)
colnames(cnames, my_data)
?colnames
colnames(my_data) <- cnames
my_dat
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
6 < 7
10 <= 10
5 != 7
!(5==7)
FALSE & FALSE
TRUE & c(TRUE, FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5 == 6, !FALSE)
ints <- sample(10)
ints
ints > 5
wich(ints>7)
which(ints>7)
any(ints <0)
all(ints > 0)
head(flags)
dim(flags)
viewinfo()
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors,sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, range)
shapem_mat <- sapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3, 4, 5, 5, 5, 6, 6))
unique_val <- lapply(flags, unique)
unique_vals <- lapply(flags, unique)
unique_vals
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmasses, summary)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrows(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0,1), 100, replace=TRUE, prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
rpois(5, mean=10)
?rpois
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1<-Sys.time()
t1
class(t1)
unclass(t1)
as.POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarter(t2)
quarters(t2)
t3 <- "October 17, 1986 08:24"
strptime(t3, "%B %d, %Y %H:%M")
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units = 'days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(y=cars$speed, x=cars$dist)
plot(x = cars$speed, y = cars$dist, x-axis="speed")
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab="speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist,  ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab="Speed", ylab="Stopping Distance" , main="My Plot")
plot(cars , main="My Plot")
plot(cars , main="My Plot", submain="My Plot Subtitle")
plot(cars , main="My Plot", sub="My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2)
data(mtcars)
play()
str(mtcars)
nxt()
?boxplot
boxplot(mpg ~ cyl, mtcars)
hist(mtcars$mpg)
above<- function(x,n){
use <- x > n
x[use]
}
above(1:20, 10)
library(httr)
oauth_endpoints("github")
GITHUB_CONSUMER_SECRET  <- "a1b77e1ef18a5993c047683b54b95bcbf767c0cb"
myapp <- oauth_app("github", "c117f2f036909ab412b2")
GITHUB_CONSUMER_SECRET
myapp <- oauth_app("github", "c117f2f036909ab412b2", secret = "a1b77e1ef18a5993c047683b54b95bcbf767c0cb")
gtoken <- config(token = github_token)
github_token <- oauth2.0_token(oauth_endpoints("github"), myap
p)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
gtoken
gtoken[0]
gtoken
class(gtoken)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
clear
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", "c117f2f036909ab412b2", secret = "a1b77e1ef18a5993c047683b54b95bcbf767c0cb")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
req
stop_for_status(req)
github_token
install.packages("rvest")
library(rvest)
url <-"teste"
papel <- "1"
paste(url, papel, sep="")
url <- "http://fundamentus.com.br/detalhes?papel="
url <- "http://fundamentus.com.br/detalhes?papel=PETR4"
mypage <- html(url)
url <- "http://fundamentus.com.br/detalhes.php?papel=PETR4"
mypage <- html(url)
mypage %>% html_node(".oscil")
mypage %>% html_node(".oscil font")
mypage %>% html_node(".oscil font") %>% html_text()
mypage %>% html_node(".oscil font") %>% html_text() %>% as.numeric()
mypage %>% html_node(".oscil font") %>% html_text() %>% gsub("%","") %>% as.numeric()
mypage %>% html_node(".oscil font") %>% html_text() %>% gsub("%","") %>%
mypage %>% html_node(".oscil font") %>% html_text() %>% gsub("%","")
mypage %>% html_node(".oscil font") %>% html_text() %>% gsub("%","")
?gsub
oscilaçoes_dia <- mypage %>% html_node(".oscil font") %>% html_text()
gsub("%", "", oscilaçoes_dia)
oscilaçoes_dia <- mypage %>% html_node(".oscil font") %>% html_text()
oscilaçoes_dia <- gsub("%", "", oscilaçoes_dia)
oscilaçoes_dia <- gsub(",", ".", oscilaçoes_dia)
oscilaçoes_dia
oscilaçoes_dia <- mypage %>% html_node(".oscil font") %>% html_text()
oscilaçoes_dia <- gsub("%", "", oscilaçoes_dia)
oscilaçoes_dia <- as.numeric(gsub(",", ".", oscilaçoes_dia))
oscilaçoes_dia
mypage %>% html_node("table.w728") %>%
message
mypage %>% html_node("table.w728")
mypage %>% html_node("table.w728 td")
mypage %>% html_node("table.w728 tr")
mypage %>% html_node("table.w728 .data")
mypage %>% html_node("table.w728 tbody")
mypage %>% html_node("table.w728 tr td")
mypage %>% html_node("td.label")
mypage %>% html_node(".w728")
mypage %>% html_node(".w728 tbdoy")
mypage %>% html_node(".w728") %>% html_node("tbody")
mypage %>% html_node(".w728") %>% html_node("tr")
mypage %>% html_nodes("td.label")
mypage %>% html_nodes("span.txt")
mylist <- mypage %>% html_nodes("span.txt") %>% html_text()
mylist
mylist[29]
mylist[29] == "Oscilaçoes"
guess_encoding(mylist[29])
repair_encoding(mylist[29])
repair_encoding(mylist)
mylist
mylist[seq(1,length(mylist),2)]
mylist
mylist <- repair_encoding(mylist)
collum_names <- mylist[seq(1,28,2)]
collum_names
dfheader <- data.frame()
collum_names <- gsub(" ", "_", collum_names)
collum_names
collum_names <- gsub("$\(\)\.", "", collum_names)
collum_names <- gsub("$|(|)|.", "", collum_names)
collum_names
collum_names <- mylist[seq(1,28,2)]
collum_names <- gsub("\$|(|)|.", "", collum_names)
collum_names <- gsub("\\$|(|)|.", "", collum_names)
collum_names
collum_names <- mylist[seq(1,28,2)]
#collum_names <- gsub(" ", "_", collum_names)
collum_names <- gsub("[[:punct:]]", "", collum_names)
collum_names
collum_names <- mylist[seq(1,28,2)]
collum_names <- gsub("[[:punct:]]", "", collum_names)
collum_names <- gsub(" ", "_", collum_names)
collum_names
collum_names <- mylist[seq(1,28,2)]
collum_names <- gsub("[[:punct:]]", "", collum_names)
collum_names <- tolower(gsub(" ", "_", collum_names))
collum_names
library(gsubfn)
unwanted_array = list(    'Š'='S', 'š'='s', 'Ž'='Z', 'ž'='z', 'À'='A', 'Á'='A', 'Â'='A', 'Ã'='A', 'Ä'='A', 'Å'='A', 'Æ'='A', 'Ç'='C', 'È'='E', 'É'='E',
'Ê'='E', 'Ë'='E', 'Ì'='I', 'Í'='I', 'Î'='I', 'Ï'='I', 'Ñ'='N', 'Ò'='O', 'Ó'='O', 'Ô'='O', 'Õ'='O', 'Ö'='O', 'Ø'='O', 'Ù'='U',
'Ú'='U', 'Û'='U', 'Ü'='U', 'Ý'='Y', 'Þ'='B', 'ß'='Ss', 'à'='a', 'á'='a', 'â'='a', 'ã'='a', 'ä'='a', 'å'='a', 'æ'='a', 'ç'='c',
'è'='e', 'é'='e', 'ê'='e', 'ë'='e', 'ì'='i', 'í'='i', 'î'='i', 'ï'='i', 'ð'='o', 'ñ'='n', 'ò'='o', 'ó'='o', 'ô'='o', 'õ'='o',
'ö'='o', 'ø'='o', 'ù'='u', 'ú'='u', 'û'='u', 'ý'='y', 'ý'='y', 'þ'='b', 'ÿ'='y' )
gsubfn(paste(names(unwanted_array),collapse='|'), unwanted_array,collum_names)
collum_names
collum_names <- gsubfn(paste(names(unwanted_array),collapse='|'), unwanted_array,collum_names)
collum_names
myvalues <- mylist[seq(2,28,2)]
myvalues
myvalues <- tolower(gsub(" ", "_", myvalues))
myvalues <- tolower(gsub(".", "", myvalues))
myvalues <- gsubfn(paste(names(unwanted_array),collapse='|'), unwanted_array,myvalues)
myvalues
myvalues <- mylist[seq(2,28,2)]
myvalues <- tolower(gsub(" ", "_", myvalues))
myvalues <- tolower(gsub("\\.", "", myvalues))
myvalues
mylist[seq(2,28,2)]
myvalues <- gsub(",", ".", myvalues)
myvalues
myvalues <- gsubfn(paste(names(unwanted_array),collapse='|'), unwanted_array,myvalues)
myvalues
myvalues <- mylist[seq(2,28,2)]
myvalues <- tolower(gsub("\\.", "", myvalues))
myvalues <- gsub(",", ".", myvalues)
myvalues
myvalues <- mylist[seq(2,28,2)]
myvalues <- gsub("\\.", "", myvalues)
myvalues <- gsub(",", ".", myvalues)
myvalues <- mylist[seq(2,28,2)]
myvalues <- gsub("\\.", "", myvalues)
myvalues <- gsub(",", ".", myvalues)
myvalues[2]<-as.numeric(myvalues[2])
myvalues[6]<-as.numeric(myvalues[6])
myvalues[8]<-as.numeric(myvalues[8])
myvalues[10]<-as.numeric(myvalues[10])
myvalues[11]<-as.numeric(myvalues[11])
myvalues[13]<-as.numeric(myvalues[13])
myvalues[14]<-as.numeric(myvalues[14])
myvalues
class(myvalues)
colnames(dfheader) <- collum_names
collum_names
dfheader <- cbind(1, 1:14)
colnames(dfheader) <- collum_names
dfheader
dfheader <- cbind(1, 1,1,1,1,1,1,1,1,1,1,1,1,1)
dfheader
colnames(dfheader) <- collum_names
dfheader
dfheader <- cbind("","","","","","","","","","","","","","")
colnames(dfheader) <- collum_names
dfheader
dfheader <- rbind(myvalues)
head(dfheader)
df <- read.csv("activity.csv")
df_na <- df
df <- df %>% filter(!is.na(steps)) %>% mutate(date = ymd(date))
library(dplyr)
library(lubridate)
library(ggplot2)
df <- read.csv("activity.csv")
df_na <- df
df <- df %>% filter(!is.na(steps)) %>% mutate(date = ymd(date))
setwd("F:/Documents/coursera/Reproducible Research/Peer Assignment 1/git/reproducible_research_assignment_1")
df <- read.csv("activity.csv")
df_na <- df
df <- df %>% filter(!is.na(steps)) %>% mutate(date = ymd(date))
df_interval <- df %>% group_by(interval) %>%summarise(mean_steps=mean(steps))
new_df <- df_na
new_df$steps <- mapply(substituteNas, df_na$steps, df_na$interval)
getMeanByInterval <- function(x){
filter(df_interval,interval == x)$mean_steps
}
substituteNas <- function(steps, interval){
s <- 0
if (is.na(steps)){
s <- getMeanByInterval(interval)
}
else{
s<- steps
}
s
}
<- df_na
new_df$steps <- mapply(substituteNas, df_na$steps, df_na$interval)
new_df
head(new_df)
df_date <- new_df %>% group_by(date) %>% summarize(total_steps = sum(steps))
g <- ggplot(df_date, aes(x=total_steps))
g + geom_histogram()
g + geom_histogram(binwidth=5)
g + geom_histogram(binwidth=1)
g + geom_histogram(binwidth=100)
g + geom_histogram(binwidth=1000)
df <- df %>% mutate(type = ifelse(weeekdays(date) == "sábado" | weeekdays(date) == "domingo", "weekend", "weekday"))
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | wweekdays(date) == "domingo", "weekend", "weekday"))
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | weekdays(date) == "domingo", "weekend", "weekday"))
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | weekdays(date) == "domingo", factor("weekend"), factor("weekday")))
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | weekdays(date) == "domingo", aas.factor("weekend"), as.factor("weekday")))
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | weekdays(date) == "domingo", as.factor("weekend"), as.factor("weekday")))
View(df)
View(df)
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | weekdays(date) == "domingo", "weekend", "weekday"))
summary(df)
df$type <- as.factor(df$type)
summary(df)
df_interval_weekday <- filter(df, type=="weekday") %>% group_by(interval) %>% summarize(mean_steps  = mean(steps))
df_interval_weekend <- filter(df, type=="weekend") %>% group_by(interval) %>% summarize(mean_steps  = mean(steps))
source("multiplot.R")
df_interval_weekday <- filter(df, type=="weekday") %>% group_by(interval) %>% summarize(mean_steps  = mean(steps))
df_interval_weekend <- filter(df, type=="weekend") %>% group_by(interval) %>% summarize(mean_steps  = mean(steps))
# First plot
p1 <- ggplot(df_interval_weekday, aes(x=date, y=mean_steps, colour=blue) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=date, y=mean_steps, colour=red) +
geom_line() +
ggtitle("Weekend average number of steps taken")
multiplot(p1, p2)
p1 <- ggplot(df_interval_weekday, aes(x=date, y=mean_steps, colour=blue) +
geom_line() +
ggtitle("Weekday average number of steps taken")
p1 <- ggplot(df_interval_weekday, aes(x=date, y=mean_steps, colour=blue)) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=date, y=mean_steps, colour=red)) +
geom_line() +
ggtitle("Weekend average number of steps taken")
multiplot(p1, p2)
p1 <- ggplot(df_interval_weekday, aes(x=date, y=mean_steps, colour="blue")) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=date, y=mean_steps, colour="red")) +
geom_line() +
ggtitle("Weekend average number of steps taken")
multiplot(p1, p2)
p1 <- ggplot(df_interval_weekday, aes(x=date, y=mean_steps, colour="blue")) +
geom_line() +
ggtitle("Weekday average number of steps taken")
p2 <- ggplot(df_interval_weekend, aes(x=date, y=mean_steps, colour="red")) +
geom_line() +
ggtitle("Weekend average number of steps taken")
print(p1)
p1 <- ggplot(df_interval_weekday, aes(x=interval, y=mean_steps, colour="blue")) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=interval, y=mean_steps, colour="red")) +
geom_line() +
ggtitle("Weekend average number of steps taken")
print(p1)
print(p2)
multiplot(p1, p2)
p1 <- ggplot(df_interval_weekday, aes(x=interval, y=mean_steps, colour=type)) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=interval, y=mean_steps, colour=type)) +
geom_line() +
ggtitle("Weekend average number of steps taken")
multiplot(p1, p2)
df_interval_weekend <- filter(df, type=="weekend") %>% group_by(interval, type) %>% summarize(mean_steps  = mean(steps))
df_interval_weekday <- filter(df, type=="weekday") %>% group_by(interval, type) %>% summarize(mean_steps  = mean(steps))
df_interval_weekend <- filter(df, type=="weekend") %>% group_by(interval, type) %>% summarize(mean_steps  = mean(steps))
# First plot
p1 <- ggplot(df_interval_weekday, aes(x=interval, y=mean_steps, colour=type)) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=interval, y=mean_steps, colour=type)) +
geom_line() +
ggtitle("Weekend average number of steps taken")
multiplot(p1, p2)
setwd("F:/Documents/coursera/Reproducible Research/Peer Assignment 1/github/RepData_PeerAssessment1")
multiplot <- function(..., plotlist=NULL, file, cols=1, layout=NULL) {
library(grid)
# Make a list from the ... arguments and plotlist
plots <- c(list(...), plotlist)
numPlots = length(plots)
# If layout is NULL, then use 'cols' to determine layout
if (is.null(layout)) {
# Make the panel
# ncol: Number of columns of plots
# nrow: Number of rows needed, calculated from # of cols
layout <- matrix(seq(1, cols * ceiling(numPlots/cols)),
ncol = cols, nrow = ceiling(numPlots/cols))
}
if (numPlots==1) {
print(plots[[1]])
} else {
# Set up the page
grid.newpage()
pushViewport(viewport(layout = grid.layout(nrow(layout), ncol(layout))))
# Make each plot, in the correct location
for (i in 1:numPlots) {
# Get the i,j matrix positions of the regions that contain this subplot
matchidx <- as.data.frame(which(layout == i, arr.ind = TRUE))
print(plots[[i]], vp = viewport(layout.pos.row = matchidx$row,
layout.pos.col = matchidx$col))
}
}
}
df <- read.csv("activity.csv")
df_na <- df
df <- df %>% filter(!is.na(steps)) %>% mutate(date = ymd(date))
df_date <- df %>% group_by(date) %>% summarize(total_steps = sum(steps))
df_interval <- df %>% group_by(interval) %>%summarise(mean_steps=mean(steps))
new_df <- df_na
new_df$steps <- mapply(substituteNas, df_na$steps, df_na$interval)
head(new_df)
df <- df %>% mutate(type = ifelse(weekdays(date) == "sábado" | weekdays(date) == "domingo", as.factor("weekend"), as.factor("weekday")))
df_interval_weekday <- filter(df, type=="weekday") %>% group_by(interval, type) %>% summarize(mean_steps  = mean(steps))
df_interval_weekend <- filter(df, type=="weekend") %>% group_by(interval, type) %>% summarize(mean_steps  = mean(steps))
p1 <- ggplot(df_interval_weekday, aes(x=interval, y=mean_steps, colour=type)) +
geom_line() +
ggtitle("Weekday average number of steps taken")
# Second plot
p2 <- ggplot(df_interval_weekend, aes(x=interval, y=mean_steps, colour=type)) +
geom_line() +
ggtitle("Weekend average number of steps taken")
multiplot(p1, p2)
print(p1)
